https://www.udemy.com/course/docker-kubernetes-the-practical-guide/

#SECTION 1-4

#using named volumes (persistent)
docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback feedback-node:volumes

#using bind mounts (bind local app folder with container app folder) -- including anynomous volume to present overwriting protected folders (node_modules) 
docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback -v "D:\vscode-workspace\docker_complete:/app" -v /app/node_modules feedback-node:volumes

#using bind mounts adding read-only on volume :ro
docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback -v "D:\vscode-workspace\docker_complete:/app:ro" -v /app/temp -v /app/node_modules feedback-node:volumes

#specifying env port
docker run -d -p 3000:8000 --env PORT=8000 --rm --name feedback-app -v feedback:/app/feedback -v "D:\vscode-workspace\docker_complete:/app:ro" -v /app/temp -v /app/node_modules feedback-node:env

#specifying env port using file
docker run -d -p 3000:8000 --env-file ./.env --rm --name feedback-app -v feedback:/app/feedback -v "D:\vscode-workspace\docker_complete:/app:ro" -v /app/temp -v /app/node_modules feedback-node:env

#using ARGs to for docker build
docker build -t feedback-node:dev --build-arg DEFAULT_PORT=8000 .

#localhost >>> host.docker.internal


docker run --name favorites -d --rm -p 3000:3000 favorites-node

#create network (bridge is default but can be added in the command)
docker network create --driver bridge favorites-net

    Docker also supports these alternative drivers - though you will use the "bridge" driver in most cases:

    host: For standalone containers, isolation between container and host system is removed (i.e. they share localhost as a network)

    overlay: Multiple Docker daemons (i.e. Docker running on different machines) are able to connect with each other. Only works in "Swarm" mode which is a dated / almost deprecated way of connecting multiple containers

    macvlan: You can set a custom MAC address to a container - this address can then be used for communication with that container

    none: All networking is disabled.

    Third-party plugins: You can install third-party plugins which then may add all kinds of behaviors and functionalities

    As mentioned, the "bridge" driver makes most sense in the vast majority of scenarios.

docker run -d --name mongodb --network favorites-net mongo
docker run --name favorites --network favorites-net -d --rm -p 3000:3000 favorites-node

#SECTION 5

#81 
docker run --name mongodb --rm -d -p 27017:27017 mongo

#82
docker build -t goals-node .
docker run --name goals-backend --rm -d -p 80:80 goals-node

#83 react needs to the container to run with the "-it" option to enable interactive terminal
docker build -t goals-react .
docker run --name goals-frontend --rm -d -p 3000:3000 -it goals-react

#84
docker network create goals-net
docker run --name mongodb --rm -d --network goals-net mongo
docker build -t goals-node .
docker run --name goals-backend --rm -d --network goals-net -p 80:80 goals-node
docker build -t goals-react .
docker run --name goals-frontend --rm -d -p 3000:3000 -it goals-react

#85 add data persistence to mongodb with volumes
docker run --name mongodb -v data:/data/db --rm -d --network goals-net mongo

#add authentication to mongodb
docker run --name mongodb -v data:/data/db --rm -d --network goals-net -e MONGO_INITDB_ROOT_USERNAME=max -e MONGO_INITDB_ROOT_PASSWORD=secret mongo
node app >>  'mongodb://max:secret@mongodb:27017/course-goals?authSource=admin'

#86 volumes, bind mounts for nodejs container
added nodemon as a devdependency to backend and modify npm start script
docker run --name goals-backend -v "D:\vscode-workspace\docker_complete\backend:/app"-v logs:/app/logs -v /app/node_modules --rm -d --network goals-net -p 80:80 goals-node

docker run --name goals-backend -v "D:\vscode-workspace\docker_complete\backend:/app"-v logs:/app/logs -v /app/node_modules -e MONGODB_USERNAME=max -e MONGODB_PASSWORD=secret --rm -d --network goals-net -p 80:80 goals-node


#87 live source updates for react container
docker run -v "D:\vscode-workspace\docker_complete\frontend\src:/app/src" --name goals-frontend --rm -p 3000:3000 -it goals-react

#95-98
#detached mode
docker-compose up -d 

# force re-build images
docker-compose up --build -d 

# just to build images in docker-compose file and not start the container
docker-compose build 

docker-compose down

# and remove volumes
docker-compose down -v






